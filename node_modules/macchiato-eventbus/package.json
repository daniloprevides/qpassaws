{
  "name": "macchiato-eventbus",
  "version": "0.0.1",
  "contributors": [
    {
      "name": "petitpre"
    }
  ],
  "homepage": "https://github.com/petitpre/Macchiato-eventbus/",
  "bugs": {
    "url": "http://github.com/petitpre/Macchiato-eventbus/issues"
  },
  "license": "GPL",
  "files": [
    "src/main/javascript",
    "target"
  ],
  "main": "src/main/javascript/macchiato-server.js",
  "devDependencies": {
    "grunt": "0.4.x",
    "grunt-contrib-jshint": "0.3.x",
    "grunt-contrib-clean": "0.4.x",
    "grunt-contrib-concat": "0.1.x",
    "grunt-contrib-uglify": "0.2.x",
    "grunt-exec": "0.4.x",
    "grunt-contrib-qunit": " 0.2.x",
    "grunt-execute": "0.1.x"
  },
  "dependencies": {
    "websocket": "1.0.8"
  },
  "readme": "Macchiato-eventbus\n==================\n\nMacchiato-eventbus is a distributed event bus written in JavaScript. \nIt allow to distribute applications between your navigator, [node.js](http://nodejs.org/) application server, Java and Android application by using [Rhino](https://developer.mozilla.org/fr/docs/Rhino) script engine.\n \nYou can use Macchiato-eventbus to build [real-time web](http://en.wikipedia.org/wiki/Real-time_web) and mobile applications.\n\n## Documentation \n* [Installation](#installation)\n* [Two minutes tutorial](#tuto)\n* [Core Concepts](#coreconcepts)\n* [Build](#build)\n* [License](#license)\n\n<h2 id=\"installation\">Installation</h2>\n\n### Using macchiato-eventbus in your webpage\n\nTo use the Macchiato-eventbus, you just have to reference the file from GitHub in the script tag:\n\n    <script src=\"https://rawgithub.com/petitpre/Macchiato-eventbus/master/target/macchiato.min.js\"></script>\n    \nYou can also download a copy of macchiato-eventbus ([compressed](https://raw.github.com/petitpre/Macchiato-eventbus/master/target/macchiato.min.js) or [uncompressed](https://raw.github.com/petitpre/Macchiato-eventbus/master/target/macchiato.js)) and using it locally.\n\nYou can find a complete client-side event-bus [here](https://rawgithub.com/petitpre/Macchiato-eventbus/master/src/example/helloworld/clientonly.html).\n\n### Using eventbus in your node.js applications\n\nTo use macchiato-eventbus in your node.js application, you need to install module macchiato-eventbus\n    \n    npm install macchiato-eventbus\n\nYou can use the bus event macchiato in your node.js application :\n\n    require(\"macchiato-eventbus\");\n    \n    macchiato.createServerApplication(function(bus) {\n      // register to hello event\n      bus.subscribe(function(msg) {\n         console.log(\"received :\" + JSON.stringify(msg));\n      }, { hello : \".*\" });\n    \n      // send a hello event\n      bus.publish({ hello : \"my name\" });\n    });\n\n### Using Event-bus on Android applications\n\n% TODO : create a giter8 template\n\n<h2 id=\"tuto\">Create a realtime-web application in two minutes</h2>\n\n### Prerequisite\n\nYou need to have [node.js](http://nodejs.org/) installed on your computer.\n\nWe will create an application with two parts.\nThe first is a node.js server, which reads the values ​​from the console and publish an event with content.\nThe second is a web client connected to the server. It will display all messages entered into the server console.\n\nIn your project directory, use node package manager to install macchiato event-bus :\n\n    npm install macchiato-eventbus\n    \nTo create the server, put the following code into a file `server.js`\n\n    require(\"macchiato-eventbus\");\n\n    macchiato.createServerApplication(function(bus) {\n      // read standard input\n      var sys = require(\"sys\");\n      var stdin = process.openStdin();\n      stdin.addListener(\"data\", function(d) {\n        bus.publish({\"entered\" : d.toString().substring(0, d.length - 1) });\n      });\n    }).listen(8080);\n\nTo create the client, put the following code into a file `index.html`\n\n    <!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>\n    <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"fr\" lang=\"fr\"><head><title>Hello world</title>\n\n    <script src=\"https://rawgithub.com/petitpre/Macchiato-eventbus/master/target/macchiato.js\"></script>\n    <script src=\"http://code.jquery.com/jquery-1.10.1.min.js\"></script>\n\n    <script type=\"text/javascript\">\n      $(function() {\n        macchiato.createEventApplication(function(bus) {\n          bus.subscribe(function(msg) {\n            $(\"#content\").append(msg.entered + \"<br/>\");\n          }, {'entered' : \".*\" });\n          bus.createChannel(\"ws://localhost:8080\").when(function() {\n            console.log(\"connected to server !\");\n          });\n        });\n      });\n    </script>\n    </head><body><div id=\"content\"></div></body></html>\n    \nTo run example, run server with command `node server.js` and open `index.html` in your browser.\nThe text entered in the server console will be displayed in the web page.\n\n<h2 id=\"coreconcepts\">Core Concepts</h2>\n\n### Handler references\n\nTo send an event to an handler, you can use the handler reference :\n    \n    // register an handler with a reference\n    var handlerref = bus.subscribe(function(msg) {\n        // my event-handling code\n    });\n\t\t// send message directly to handler\n    bus.send(\"my event\").to(handlerref);\n\nThe references may be useful in some cases, but it is preferable to use content-based filtering presented in the next section.\n\n### Content-based subscription\n\nIn Macchiato-eventbus, we also provide a content-based filtering. You can specify a constraint when subscribing the handler.\n\n    bus.subscribe(function(msg) {\n      // your handling code\n    },\n    // content filter\n     {\n      'welcome' : \".*\"\n    });\n\nThis handler will match every message with a \"welcome\" property.\nThe properties of the subscription pattern are defined using JavaScript [regular expressions](http://www.w3schools.com/jsref/jsref_obj_regexp.asp).\nEach filter properties is tested recursively against property of events.\n\n### Creating a channel between two bus\n\nTo connect the bus events, we use channels. A channel is always open to the initiative of a client to a server.\nTypically, the client is your web browser and the server is a server node.js.\nAn event-bus running in node.js can also establish a connection to another  node.js event-bus\n\nEvent-bus running in web browsers and Android can not accept incoming connections.\n\nOnce the event-bus are connected by a channel, the events from each event-bus are automatically routed to matching handlers. \n\n<h2 id=\"build\">Build</h2>\n\nyou need to have node.js installed\n   \ninstall node.js dependencies :\n    \n    $> npm install\n\nBuild last version of Macchiato event bus :\n    \n    $> grunt\n\nUncompressed and compressed version of macchiato-eventbus are available in `target` directory\n \n<h2 id=\"license\">License</h2>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.",
  "readmeFilename": "README.md",
  "_id": "macchiato-eventbus@0.0.1",
  "description": "Macchiato-eventbus ==================",
  "dist": {
    "shasum": "77ff42eb930c7d16c4175a6c728dfe4e09d77ab6",
    "tarball": "http://registry.npmjs.org/macchiato-eventbus/-/macchiato-eventbus-0.0.1.tgz"
  },
  "_from": "macchiato-eventbus@*",
  "_npmVersion": "1.2.15",
  "_npmUser": {
    "name": "petitpre",
    "email": "nicolas.petitprez@gmail.com"
  },
  "maintainers": [
    {
      "name": "petitpre",
      "email": "nicolas.petitprez@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "77ff42eb930c7d16c4175a6c728dfe4e09d77ab6",
  "_resolved": "https://registry.npmjs.org/macchiato-eventbus/-/macchiato-eventbus-0.0.1.tgz"
}
